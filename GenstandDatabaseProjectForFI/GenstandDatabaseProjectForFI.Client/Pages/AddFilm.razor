@page "/add-film"
@page "/add-film/{Id:int}"

@rendermode InteractiveAuto

@*@attribute [Authorize]*@
@* @attribute [Authorize(Roles = "Admin")] *@


<h3>Tilføj Film</h3>

@if (!string.IsNullOrEmpty(saveSuccessMessage))
{
    <div class="alert alert-succes">
        @saveSuccessMessage
    </div>
}

<div class="form-container">
    <EditForm Model="@FilmModel" OnValidSubmit="@HandleSave" FormName="addFilm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label class="form-label">Name</label>
            <InputText @bind-Value="FilmModel.Name" class="form-control"></InputText>
            <ValidationMessage For="()=>FilmModel.Name"></ValidationMessage>
        </div>

        <div class="form-group">
            <label class="form-label">År</label>
            <InputNumber @bind-Value="FilmModel.Year" class="form-control"></InputNumber>
            <ValidationMessage For="()=>FilmModel.Year"></ValidationMessage>
        </div>

        <div class="form-group">
            <label class="form-label">Genre</label>
            <InputText @bind-Value="FilmModel.Genre" class="form-control"></InputText>
            <ValidationMessage For="()=>FilmModel.Genre"></ValidationMessage>
        </div>

        <div class="form-group" id="linkInput">
            <label class="form-label">Link</label>
            <InputText type="url" @bind-Value="FilmModel.Fida"></InputText>
            <ValidationMessage For="() => FilmModel.Fida"></ValidationMessage>

        </div>

        <button type="submit" class="btn btn-primary">Gem</button>
    </EditForm>
</div>


@code {

    //[SupplyParameterFromForm]
    public Film FilmModel { get; set; } = new();
    [Parameter] public int Id { get; set; }
    public Film FilmReturn = new();
    private string saveSuccessMessage;

    private async Task HandleSave()
    {
        if (FilmModel.Id > 0)
        {
            var response = await httpClient.PutAsJsonAsync("api/Film/Update-Film", FilmModel);
            var film = await response.Content.ReadFromJsonAsync<Film>();
            if (response.IsSuccessStatusCode)
            {
                FilmModel = new();
                saveSuccessMessage = "Film data updated successfully!";
                NavigationManager.NavigateTo("Film-list");
            }
            else
            {
                saveSuccessMessage = "Failed to update film data.";
            }
        }
        else
        {
            var response = await httpClient.PostAsJsonAsync("api/Film/Add-Film", FilmModel);
            if (response.IsSuccessStatusCode)
            {
                FilmReturn = await response.Content.ReadFromJsonAsync<Film>();
                FilmModel = new();
                saveSuccessMessage = "Film added successfully!";
            }
            else
            {
                saveSuccessMessage = "Failed to add film.";
            }
        }
    }

    @*
    protected override async Task OnParameterSetAsync()
    {
        if (Id > 0)
        {
            var response = await httpClient.GetAsync($"api/Film/Single-Film/{Id}");
            FilmModel = await response.Content.ReadFromJsonAsync<Film>();
        }
    }
    *@
}